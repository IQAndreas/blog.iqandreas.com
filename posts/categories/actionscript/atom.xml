<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: actionscript | Andreas Renberg (IQAndreas)]]></title>
  <link href="http://blog.iqandreas.com/posts/categories/actionscript/atom.xml" rel="self"/>
  <link href="http://blog.iqandreas.com/"/>
  <updated>2013-10-14T00:36:18+02:00</updated>
  <id>http://blog.iqandreas.com/</id>
  <author>
    <name><![CDATA[Andreas Renberg (IQAndreas)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why my one line if statements are unusual]]></title>
    <link href="http://blog.iqandreas.com/actionscript/why-my-one-line-if-statements-are-unusual/"/>
    <updated>2013-01-04T13:02:00+01:00</updated>
    <id>http://blog.iqandreas.com/actionscript/why-my-one-line-if-statements-are-unusual</id>
    <content type="html"><![CDATA[<p>My one line if statements have been described as <em>&ldquo;um&hellip; unique&rdquo;</em> and <em>&ldquo;making me cringe&rdquo;</em>, but trust me, there is method to this madness; mainly, it&rsquo;s practical for debugging.<!-- more --> The sample code is in ActionScript, but should be self-explanatory in any language with similar semantics:</p>

<p>```as3
if ((data.length > 0) &amp;&amp; server.enabled)</p>

<pre><code>{ server.send(data); }
</code></pre>

<p>```</p>

<p><em>The average developer</em> doesn&rsquo;t include those extra braces on the second line, and in fact, many will even keep everything on one single line. (You could also pull the braces down so the block of code occupies a full 4 lines of code, but that seems highly unnecessary.)</p>

<p><code>as3
if ((data.length &gt; 0) &amp;&amp; server.enabled) server.send(data);
</code></p>

<p>The reason I add these otherwise unnecessary braces is primarily for debugging. Say in our sample code, the data isn&rsquo;t arriving at the server; a good developer goes back to make sure the data is being sent in the first place. The following function <em>looks</em> correct (and as a side note should work in a white-space oriented language such as Python), but does not function as expected:</p>

<p>```as3
if ((data.length > 0) &amp;&amp; server.enabled)</p>

<pre><code>server.send(data); trace("Data sent");
</code></pre>

<p>// or even
if ((data.length > 0) &amp;&amp; server.enabled)</p>

<pre><code>server.send(data);
trace("Data sent");
</code></pre>

<p>// But my personal preference allows for the additional code:
if ((data.length > 0) &amp;&amp; server.enabled)</p>

<pre><code>{ server.send(data); trace("Data sent"); }
</code></pre>

<p>```</p>

<p>A good developer is smart enough to add the required brackets when adding the &ldquo;debugging code&rdquo;. I prefer adding the brackets preemptively; the extra time it takes to wrap the code in brackets isn&rsquo;t that valuable to me.</p>

<p><em>(I also have a personal philosophy that <code>if</code>, <code>for</code>, <code>do</code>, and <code>while</code> should always be followed by an open bracket containing code rather than just code on its own, but that just has to do with the way I view the language as functioning behind the scenes. But it&rsquo;s more difficult convincing other developers based on those grounds.)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Ignore the Constructor when Extending a Class]]></title>
    <link href="http://blog.iqandreas.com/actionscript/how-to-ignore-the-constructor-when-extending-a-class/"/>
    <updated>2012-06-13T08:47:00+02:00</updated>
    <id>http://blog.iqandreas.com/actionscript/how-to-ignore-the-constructor-when-extending-a-class</id>
    <content type="html"><![CDATA[<p>As we all know, if you don&rsquo;t call <code>super()</code> in your constructor&rsquo;s code, the Flash compiler will automatically append it to your constructor&rsquo;s code.</p>

<p>Turns out, this isn&rsquo;t entirely true. The compiler only adds <code>super()</code> if it doesn&rsquo;t see it written out in the constructor. It makes no distinction whether you actually call it or not. Here is a simple little trick if you want to completely hop over calling <code>super()</code> when creating a sub-class.<!-- more --></p>

<p><div><script src='https://gist.github.com/2922489.js'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>class Subclass extends Base 
{
	public function Subclass()
	{
		if (false)
		{
			super();
		}
	}
}</code></pre></noscript></div>
</p>

<p>If you want more reading on the matter, this information was taken from a forum thread by <a href="http://me.reclipse.net/">Krilnon</a> over at the Kirupa forums.</p>

<ul>
<li><a href="http://www.kirupa.com/forum/showthread.php?363399-Tip-Skipping-super%28%29-Interesting-behavior"><img class="favicon" src="http://www.kirupa.com/favicon.ico"> [TIP] Skipping super() &ndash; Interesting behavior</a></li>
</ul>


<p>But remember, as I brought up in the forum thread linked to above:
<blockquote><p>In my opinion, this is pure evil! No good can come of not calling constructors, none at all&hellip;</p></blockquote></p>

<p>So use with caution!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu: Adding FDT to the list of Applications]]></title>
    <link href="http://blog.iqandreas.com/actionscript/actionscript-in-ubuntu/ubuntu-adding-fdt-to-the-list-of-applications/"/>
    <updated>2012-01-17T08:48:00+01:00</updated>
    <id>http://blog.iqandreas.com/actionscript/actionscript-in-ubuntu/ubuntu-adding-fdt-to-the-list-of-applications</id>
    <content type="html"><![CDATA[<p>In this guide, we will add FDT to the list of installed applications, and optionally, install a script which &ldquo;resets&rdquo; the internal SWFViewer in case it won&rsquo;t open after closing improperly.</p>

<p><img class="center" src="/images/blog/fdt-in-ubuntu-applications-menu.png" title="FDT in Ubuntu Applications Menu" ></p>

<!-- more -->


<p><em>The following guide was written for 32bit FDT5, but may still work for future or previous versions of FDT. These instructions can of course also be used for any application that doesn&rsquo;t come with an Ubuntu installer, adjusting the  files appropriately.</em></p>

<p>If you are running Ubuntu, I&rsquo;m assuming you already know how to use the basics of the command line and how to manipulate (create, delete, change permissions) of files. If anyone wants more details, post a comment and I&rsquo;ll clarify.</p>

<p>I&rsquo;m assuming you have already <a href="http://fdt.powerflasher.com/buy-download/">downloaded FDT</a> (they have a free version if you aren&rsquo;t already using FDT) and extracted the archive.</p>

<p>I would recommend saving the files to <code>/opt/fdt5</code> (may require admin access, which is easily done without messing with the command line by running <code>gksu nautilus</code>, assuming you are still using the default file browser) Depending on what extraction tool you use, you may also need to change the permission settings for the files to allow folder access for all users.</p>

<h3>Download the FDT5 Launcher files</h3>

<p>If you want to do this the easy way, download the pre-made files from the <a href="https://github.com/IQAndreas/FDT-Ubuntu-Launcher-Files">GitHub repository</a> and install them to the locations specified in the README.</p>

<p><a href="https://github.com/IQAndreas/FDT-Ubuntu-Launcher-Files/zipball/master"><img class="favicon" src="/images/icons/icon_archive.gif"> https://github.com/IQAndreas/FDT-Ubuntu-Launcher-Files/zipball/master</a></p>

<p>You are all done. Enjoy!</p>

<p>Alternatively, you can do all the dirty work yourself (if so, keep reading).</p>

<h3>Creating the FDT5 Launcher Files manually</h3>

<p>Create a new file named FDT5.desktop with the following contents:</p>

<p><div><script src='https://gist.github.com/1626770.js?file=FDT5.desktop'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>[Desktop Entry]
Name=FDT5
#Comment=
Exec=fdt5
Icon=/opt/fdt5/fdt-icon.png
Terminal=false
Type=Application
StartupNotify=true
Categories=GNOME;Application;IDE;</code></pre></noscript></div>
</p>

<p>If you want the file to be available to all users of the computer, save the file in
&ndash; <code>/usr/share/applications/</code>
Alternatively, if you only want the currently logged in user to have FDT show up in the application menu, save the file to
&ndash; <code>~/.local/share/applications/</code></p>

<p>Next, create the following script, and save it as <code>/usr/bin/fdt5</code></p>

<p><div><script src='https://gist.github.com/1626770.js?file=fdt5'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>#!/bin/sh
#export MOZILLA_FIVE_HOME=&quot;/usr/lib/xulrunner-1.9.2.17/&quot;
export MOZILLA_FIVE_HOME=&quot;/usr/lib/mozilla/&quot;

export LD_LIBRARY_PATH=${MOZILLA_FIVE_HOME}:${LD_LIBRARY_PATH}
export GDK_NATIVE_WINDOWS=1
export ECLIPSE_HOME=&quot;/opt/fdt5&quot;

$ECLIPSE_HOME/eclipse $*
</code></pre></noscript></div>
</p>

<p>Note that the script may be a tad more complicated than it needs to be, but this is the script I&rsquo;m using since I had to jump through a few hoops getting FDT to work properly in Ubuntu.</p>

<p>You also need to set the icon for the application. The default Eclipse icon is okay, but on my system, both Eclipse for Java and <a href="http://code.google.com/p/fb4linux/">FB4Linux</a> use that same icon, so I would prefer being able to tell them apart.</p>

<p>I included FDT&rsquo;s fancy, blue dodecahedron icon <a href="https://github.com/IQAndreas/FDT-Ubuntu-Launcher-Files/blob/master/fdt-icon.png">in the repository</a>, used with permission from Powerflasher GmbH. You can use the icon provided in the repository, or use your own, but which ever icon you use for FDT, make sure to save it to <code>/opt/fdt5/fdt-icon.png</code></p>

<p>Finally, if you want FDT to stay in the launcher bar, start up FDT, right-click the icon in the launcher, and make sure &ldquo;Keep in Launcher&rdquo; is checked.</p>

<p><img class="center" src="/images/blog/fdt-in-ubuntu-launcher-keep-in-launcher.png" title="FDT in the Ubuntu Launcher. Right click and make sure &ldquo;Keep in Launcher&rdquo; is checked." ></p>

<h3>Cleaning the SWFViewer settings</h3>

<p>If the built in FDT SWFViewer quits improperly (which happens from time to time when running into AS3 errors) it will not open the next time you run the SWF. The solution is to delete a few config files for the plugin, which is a simple task, but gets annoying when you need to constantly delete the files.</p>

<p>The following script will delete said config files (assuming FDT is installed to <code>/opt/fdt5</code> as recommended) though I wish FDT had a button for this inside the IDE instead.</p>

<p><div><script src='https://gist.github.com/1626770.js?file=fdt5-clean'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code># Clean out viewer settings for FDT
# Could remove the windows and MAC settings as well, but it seems a bit uneccessary. ;)

# 32 bit linux
rm -f /opt/fdt5/plugins/com.powerflasher.fdt.ui.swfViewer_5.0.0.1412/linux32/.SWFViewerCheck
rm -f /opt/fdt5/plugins/com.powerflasher.fdt.ui.swfViewer_5.0.0.1412/linux32/.SWFViewerLock
rm -f /opt/fdt5/plugins/com.powerflasher.fdt.ui.swfViewer_5.0.0.1412/linux32/.SWFViewerRestartInfo

# 64 bit linux
rm -f /opt/fdt5/plugins/com.powerflasher.fdt.ui.swfViewer_5.0.0.1412/linux64/.SWFViewerCheck
rm -f /opt/fdt5/plugins/com.powerflasher.fdt.ui.swfViewer_5.0.0.1412/linux64/.SWFViewerLock
rm -f /opt/fdt5/plugins/com.powerflasher.fdt.ui.swfViewer_5.0.0.1412/linux64/.SWFViewerRestartInfo</code></pre></noscript></div>
</p>

<p>Save the script to <code>/usr/bin/fdt5-clean</code> and run it by typing <code>fdt5-clean</code> into the command prompt. The script does not require admin rights to run as long as your FDT install folder has full permission for all users.</p>

<p>Leave any further questions or problems in the comments and I&rsquo;ll try to help sort them out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Beginners need to know about Performance and Garbage Collection]]></title>
    <link href="http://blog.iqandreas.com/actionscript/actionscript-for-beginners/what-beginners-need-to-know-about-performance-and-garbage-collection/"/>
    <updated>2012-01-16T01:43:00+01:00</updated>
    <id>http://blog.iqandreas.com/actionscript/actionscript-for-beginners/what-beginners-need-to-know-about-performance-and-garbage-collection</id>
    <content type="html"><![CDATA[<p>Another category of beginner questions that often appear on the <a href="http://www.kirupa.com/forum/">Kirupa forums</a> are about performance and garbage collection. Some common concerns:</p>

<ul>
<li>How do I make sure my <code>MovieClips</code> are garbage collected? Is setting everything to <code>null</code> enough?</li>
<li>Should I always remove all my event listeners?</li>
<li>Someone told me it&rsquo;s better to use <code>int</code> instead of <code>uint</code> because it&rsquo;s more efficient.</li>
<li>I used <code>while(--i)</code> instead, because it is much more efficient than <code>for</code> loops.</li>
<li><code>hitTest()</code> is really slow! Every site tells me I should never use it.</li>
</ul>


<p>My answer to all those questions: <em>Don&rsquo;t worry about it</em>.</p>

<!-- more -->


<p>Don&rsquo;t get me wrong, if you are the type of person who worries about these sorts of things right now, you will make a terrific developer one day! But worrying about these things now is just going to make your code more complicated and much more difficult to manage.</p>

<h3>Strive to make your code clear and readable</h3>

<p>As a beginner, this should be your first and foremost rule. If you scratch your head every time you read your own code, coding will be overwhelming and debugging will be hell.</p>

<p>Take these two identical chunks of code as an example:</p>

<p><div><script src='https://gist.github.com/1625219.js?file=compass_rotation_compact.as'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>compass.rotation = Math.atan2(event.stageY - compass.y, event.stageX - compass.x) * (180/Math.PI) + 90;</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/1625219.js?file=compass_rotation_expanded.as'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>//Get the location of the mouse relative to the compass
var dx:Number = event.stageX - compass.x;
var dy:Number = event.stageY - compass.y;

var radianRotation:Number = Math.atan2(dy, dx);
var degreeRotation:Number = radianRotation * (180/Math.PI);

//Offset the rotation by 90 degrees to make it show up properly
compass.rotation = degreeRotation + 90;</code></pre></noscript></div>
</p>

<p>The first chunk of code is much more efficient than the second, but I wouldn&rsquo;t want to be the developer that find bugs in that project.</p>

<h3>So should I never worry about performance?</h3>

<p>Not at this point, no. First make sure you have learned the basics and syntax of ActionScript.
Then, make sure you <strong>really</strong> know the basics of ActionScript (instead of just thinking that you do while perched <a href="http://www.smbc-comics.com/?id=2475">on top of mount stupid</a>. Believe me, we have all been there). <strong>Finally</strong> you can start learning about standard coding conventions and basic performance improvements.</p>

<p>Keep in mind, most performance optimization tips (such as using <code>int</code> instead of <code>uint</code>) will shave <em>milliseconds</em> off your total time if you do tens of thousands of calculations each frame.</p>

<p>Often times, the extra milliseconds won&rsquo;t make a hill of beans difference, so worrying about them while writing the code is a waste of resources. Test your code, and make sure your project works. Then, <strong>if</strong> (and only if!) there is a problem with performance after everything is complete and working, you can go back and find which areas need optimizing.</p>

<h3>Why Garbage Collection doesn&rsquo;t matter</h3>

<p>Same principle as with optimization, don&rsquo;t worry too much about garbage collection unless you are building an enterprise-level application. Flash is actually pretty good at taking care of things for you and making sure everything gets disposed of properly. Even if it misses an image here or there, what is one measly Bitmap for a computer with +2GB of RAM? Users won&rsquo;t notice the difference if your game uses 17 MB instead of 16 MB.</p>

<p>And remember, it&rsquo;s <strong>all</strong> disposed once you close the SWF anyway.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment: Drop Painter]]></title>
    <link href="http://blog.iqandreas.com/actionscript/experiments/experiment-drop-painter/"/>
    <updated>2011-06-03T17:12:00+02:00</updated>
    <id>http://blog.iqandreas.com/actionscript/experiments/experiment-drop-painter</id>
    <content type="html"><![CDATA[<p>No, it&rsquo;s not painting with drops (though, that seems like a great idea for another project). Instead this experiment drops pieces of a painting down from above which eventually form to assemble a complete picture.</p>

<p><a href="http://iqandreas.isbetterthanyou.org/public/kirupa.com/square-contest-2011/"><img class="center" src="http://iqandreas.isbetterthanyou.org/public/kirupa.com/square-contest-2011/experiment-drop-painter-preview-image.png"></a>
<em>Click the image to go open the SWF</em></p>

<!-- more -->


<p>The code is written in AS3 and uses <a href="http://www.box2dflash.org/">Box2D</a> for the physics and <a href="http://www.minimalcomps.com/">MinimalComps</a> for the components.</p>

<p>At first I wrote the code up as a prototype just to test a concept (and rather than rewrite the code cleanly, I just kept adding onto it so it became one tightly-coupled mess).</p>

<p>I later entered it into a <a href="http://www.kirupa.com/forum/showthread.php?362779-Information-and-Rules!">contest</a> held on the <a href="http://www.kirupa.com/forum/">Kirupa Forums</a>, and modified it slightly to fit the contest theme.</p>

<p><a href="https://github.com/IQAndreas/Drop-Painter-Experiment">The source is available on GitHub</a> in case anyone is curious how it was achieved (and yes, I did cheat. It&rsquo;s not actually dynamic. The movement of all those shapes are &ldquo;pre-baked&rdquo; during the &ldquo;Loading&rdquo; screen and simply played back afterwards, which is why it is able to take up so little CPU on playback. <img class="smiley <a" src="href="http://www.kirupa.com/forum/images/smilies/trout.gif">http://www.kirupa.com/forum/images/smilies/trout.gif</a>"></p>
]]></content>
  </entry>
  
</feed>
