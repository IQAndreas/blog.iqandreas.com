<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | The Programming Blog of Andreas Renberg (IQAndreas)]]></title>
  <link href="http://blog.iqandreas.com/posts/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.iqandreas.com/"/>
  <updated>2013-11-17T12:25:40+01:00</updated>
  <id>http://blog.iqandreas.com/</id>
  <author>
    <name><![CDATA[Andreas Renberg (IQAndreas)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GIT: How to move tags]]></title>
    <link href="http://blog.iqandreas.com/git/how-to-move-tags/"/>
    <updated>2013-11-17T06:43:00+01:00</updated>
    <id>http://blog.iqandreas.com/git/how-to-move-tags</id>
    <content type="html"><![CDATA[<p>Say you already added a tag, but later realized that it was in the wrong place, or perhaps you needed to add a few more last-minute commits. How would you go about moving it?<!-- more --></p>

<p><strong>Unrelated but important side note:</strong> Since you are tagging in Git, <a href="http://www.rockstarprogrammer.org/post/2008/oct/16/git-tag-does-wrong-thing-default/">you are using the <code>-a</code> flag, right?</a></p>

<h3>Editing the tag locally</h3>

<p>You could <span class="hoverable" title="git tag -d &lt;tag_name&gt;">delete it</span> and <span class="hoverable" title="git tag -a &lt;tag_name&gt;">re-add it</span>, but all the hard work you put into writing the tag&rsquo;s description would be lost.</p>

<p>Instead, choose the place in your history where you want the tag moved to, tag it like you usually would, but add <code>-f</code> (or <code>--force</code>) to the command; that extra flag will allow you to replace the other tag with the same name. And a pleasant surprise appears if we try to overwrite an existing tag:</p>

<p><img src="/images/blog/git-terminal-window-overwrite-existing-tag.small.png" title="&ldquo;Terminal window in Ubuntu editing a GIT tag&rdquo;" ></p>

<p><em>Hey! That&rsquo;s my old tag description!</em> Now you can edit it if you want, or just save it as the way it was.</p>

<h3>Editing the tag on the server</h3>

<p>If you have already pushed the tag to the server and want to fix that, first make sure your local version of the tag is correct. Then all you need to do is make another <code>push</code> using the same <code>-f</code> (or <code>--force</code>) flag.</p>

<p><code>
 $ git push origin --tags -f
</code></p>

<p>Remember to alert any other developers on the team if you ever &ldquo;force&rdquo; a change like this. If they still have an &ldquo;old&rdquo; version of the tag around, it may cause conflicts when they try to push to the server!</p>

<h3>If the tag is edited on the server, but the local one is old</h3>

<p>Say <em>someone else</em> moved a tag, but the version in your local repository still points to the old commit? First, delete the local tag, then pull in the changes from the remote repo; the new tag will be added automatically.</p>

<p>So, for example (in my case, the tag name is <code>v2.56</code> and the remote repository is named <code>origin</code>):</p>

<p><code>
 $ git tag -d v2.56
Deleted tag 'v2.56' (was 75ff2f1)
 $ git fetch origin --tags
From https://github.com/FlixelCommunity/flixel
 * [new tag]         v2.56      -&gt; v2.56
</code></p>

<p>In this example, the <code>--tags</code> flag was actually optional, since <code>git fetch</code> will by default automatically fetch tags along with any modified branches. But there is no harm leaving it in there for clarity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT: Storing HTTPS Authentication in Ubuntu (and Arch Linux)]]></title>
    <link href="http://blog.iqandreas.com/git/storing-https-authentication-in-ubuntu-and-arch-linux/"/>
    <updated>2013-10-24T03:48:00+02:00</updated>
    <id>http://blog.iqandreas.com/git/storing-https-authentication-in-ubuntu-and-arch-linux</id>
    <content type="html"><![CDATA[<p><em><strong>TL;DR version:</strong> Skip to <a href="#storing-your-https-credentials-using-a-keyring">Storing your HTTPS credentials using a Keyring</a>.</em></p>

<p>If you use GIT in Ubuntu, you may be used to this seeing this several times a day:</p>

<p><img src="/images/blog/git-terminal-window-in-ubuntu.small.png" title="&ldquo;Terminal window in Ubuntu asking for GIT credentials&rdquo;" ></p>

<p>Tired of constantly typing typing in your credentials? (especially since GitHub requires an alpha-numerical password, so your standard, &ldquo;easy-to-type&rdquo; one won&rsquo;t do)<!-- more --></p>

<h3>If you can use SSH, use it</h3>

<p>SSH is more secure (and although I have not confirmed this officially, it seems to transfer faster than HTTPS). If it is <em>at all</em> possible, use SSH instead of HTTPS. <em>I would be using SSH myself if it wasn&rsquo;t for a known bug in the modem required by my ISP which constantly drops the connection mid-transfer; Damn you Telia!</em></p>

<p>When using SSH, you only have to &ldquo;generate&rdquo; a key once for every computer you use, store it in the appropriate directory, and every time you connect to GitHub, that key will be used automatically:</p>

<p><li class="flink com github_com help_github_com"><a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a>">&ldquo;GitHub Help: Generating SSH Keys&rdquo;</a></li></p>

<h4>If the SSH port is being blocked</h4>

<p>If it&rsquo;s just an issue of blocked ports, GitHub does provide a service for creating an SSH connection (usually <code>port 22</code>) through the HTTPS port (<code>port 443</code>) which may get past most firewalls. I&rsquo;m unsure if this is preferable to connecting over HTTPS or not, but at least the option is available:</p>

<p><li class="flink com github_com help_github_com"><a href="https://help.github.com/articles/using-ssh-over-the-https-port">https://help.github.com/articles/using-ssh-over-the-https-port</a>">&ldquo;GitHub Help: Using SSH over the HTTPS port&rdquo;</a></li></p>

<h3><a name="storing-your-https-credentials-using-a-keyring"></a>Storing your HTTPS credentials using a Keyring</h3>

<p><em>SIDE NOTE:</em> There are a lot of old solutions circling the interwebs involving either setting <code>credential.helper</code> to <code>store</code>, or by using <code>netrc</code>, however, in both of these cases the password gets stored as plain-text on your computer. This is usually not ideal.</p>

<p>Instead, you can use <code>gnome-keyring</code> to store your credentials more securely (<a href="http://stackoverflow.com/a/14528360/617937">thanks to James Ward and marcosdsanchez</a> for this solution). <em>This solution assumes you are using GIT 1.8.0 or newer, which if you installed it via <code>apt</code>, you are. If not, you can find the latest version of git from the following URL:</em></p>

<p><li class="flink com git-scm_com"><a href="http://git-scm.com/downloads">http://git-scm.com/downloads</a>">&ldquo;Git: Downloads&rdquo;</a></li></p>

<p><code>bash
$ sudo apt-get install libgnome-keyring-dev
$ sudo make --directory=/usr/share/doc/git/contrib/credential/gnome-keyring
$ git config --global credential.helper /usr/share/doc/git/contrib/credential/gnome-keyring/git-credential-gnome-keyring
</code></p>

<p>If you are using Arch Linux, you will require <a href="http://stackoverflow.com/a/13390889/617937">a slightly different command</a>, and if you are using OS-X or Windows, GitHub has provided a short set of instructions to use the same GIT feature:</p>

<p><li class="flink com github_com"><a href="https://github.com/blog/1104-credential-caching-for-wrist-friendly-git-usage">https://github.com/blog/1104-credential-caching-for-wrist-friendly-git-usage</a>">&ldquo;GitHub Blog: Credential Caching for Wrist-Friendly Git Usage&rdquo;</a></li></p>

<p>After typing in your user-name and password once the next time you are prompted for it, the credentials should be stored, saving you a lot of typing in the future. If that worked, you are done.</p>

<h3>But if you are a real stickler for security</h3>

<p>If you <em>really</em> want to require entering your password when connecting to GitHub (perhaps you are dealing with security software and want to avoid any loopholes) but are just tired of typing it in all day, you can configure GIT to store your password for a limited amount of time.</p>

<p>By default, GitHub will store your credentials for 15 minutes. If you want to increase or decrease this amount, use the following command:</p>

<p><code>bash
 $ git config --global credential.helper "cache --timeout=900"
</code></p>

<p>Replace <code>900</code> with <a href="https://www.google.com/#q=15+minutes+to+seconds">the amount of seconds you want the credentials to be saved</a>. Personally, I would recommend 5 hours (<code>18000</code> seconds) if you work in an office, and 12 hours (<code>43200</code> seconds) if you work from home. If you don&rsquo;t want this setting to apply for all your repositories but only for the current repository, remove the <code>--global</code> flag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best practices for git ignore]]></title>
    <link href="http://blog.iqandreas.com/git/best-practices-for-git-ignore/"/>
    <updated>2013-01-02T11:46:00+01:00</updated>
    <id>http://blog.iqandreas.com/git/best-practices-for-git-ignore</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.kernel.org/pub/software/scm/git/docs/">man pages for GIT</a> aren&rsquo;t usually the clearest or most helpful, and is seldom the first place I turn to for help. Still, I ran across some valuable &ldquo;best practices&rdquo; information which I myself have not been following due to ignorance.<!-- more --></p>

<p>I thought the only place to mark which files to hide was inside of a <code>.gitignore</code> file, ideally placed at the root of the repository. As a result, I would list all files and folders I may want to ignore inside of it. [<a href="https://github.com/FlixelCommunity/flixel/blob/dev/.gitignore">1</a>]</p>

<p>Instead, GIT has provided us with four places to provide <a href="http://www.kernel.org/pub/software/scm/git/docs/gitignore.html#_pattern_format"><em>file name patterns</em></a>, each with its own intended purpose <em>(some descriptions have been taken verbatim from the docs)</em>:</p>

<ul>
<li><p><strong>Sent as command line arguments</strong> <em>(Only supported by some commands)</em> &ndash; Mostly only useful for scripts or &ldquo;temporary exceptions&rdquo;.</p></li>
<li><p><strong>A .gitignore file in the project directory</strong> &ndash; Patterns which should be version-controlled and distributed to other repositories via clone (i.e., files that <em>all</em> developers will want to ignore)</p></li>
<li><p><strong>In the file .git/info/exclude</strong> &ndash; Patterns which are specific to a particular repository but which do not need to be shared with other related repositories (e.g., auxiliary files that live inside the repository but are specific to one user&rsquo;s workflow)</p></li>
<li><p><strong>In the configuration variable core.excludesfile</strong> &ndash; Patterns which a user wants GIT to ignore in <em>all</em> situations (e.g., backup or temporary files generated by the user’s editor of choice). Note that you can set the <a href="http://stackoverflow.com/questions/2114111/where-does-git-config-global-get-written-to">global config value</a>, so every single project you work on will always ignore those pesky files such as <code>Thumbs.db</code>.</p></li>
</ul>


<p>There are also further technical details in which ignores take precedence etc. in case anyone wants some heavier reading:</p>

<p><li class="flink org kernel_org www_kernel_org"><a href="http://www.kernel.org/pub/software/scm/git/docs/gitignore.html">http://www.kernel.org/pub/software/scm/git/docs/gitignore.html</a>">&ldquo;GIT Docs: gitignore Manual Page&rdquo;</a></li></p>
]]></content>
  </entry>
  
</feed>
